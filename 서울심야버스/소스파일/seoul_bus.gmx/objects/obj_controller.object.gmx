<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize variables
// This object is just for demonstration purposes. You won't need it for your project(s).
// The next_room variable has to be properly defined in the objects Creation Code
next_room = noone;
kind = transition.fade;
time = 75;
number = 0;
lastNumber = 7;
s_transition = "Fade";
s_room = "Room One";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if any keys are being pressed
// Start transition ----- TRIGGER
if (keyboard_check_pressed(vk_space)) {
    if (room == rm_1) { next_room = rm_2; }
    else { next_room = rm_1; }
    room_goto_transition(next_room, kind, time);
}

if (keyboard_check_pressed(ord("F"))) {
    var test = window_get_fullscreen();
    if (test) { window_set_fullscreen(false); }
    else { window_set_fullscreen(true); }
}

// Change transition up
if (keyboard_check_pressed(vk_left)) {
    if (number &gt; 0) { number--; } else { number = lastNumber; }
    kind = number;
    
    event_perform(ev_other, ev_user0);
}

// Change transition down
if (keyboard_check_pressed(vk_right)) {
    if (number &lt; lastNumber) { number++; } else { number = 0; }
    kind = number;
    
    event_perform(ev_other, ev_user0);
}

// Speed up
if (keyboard_check_pressed(vk_up)) { if (time &lt; 150) then time += 5; }

// Speed down
if (keyboard_check_pressed(vk_down)) { if (time &gt; 0) then time -= 5; }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Define which transition is currently being used
switch (kind) {
    case transition.fade: s_transition = "Fade"; break;
    case transition.right: s_transition = "Slide Right"; break;
    case transition.up: s_transition = "Slide Up"; break;
    case transition.left: s_transition = "Slide Left"; break;
    case transition.down: s_transition = "Slide Down"; break;
    case transition.stripe_hor: s_transition = "Horizontal Stripes"; break;
    case transition.stripe_ver: s_transition = "Vertical Stripes"; break;
    case transition.circle: s_transition = "Expanding Circle"; break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw GUI for the demo
var c = draw_get_color();
var a = draw_get_alpha();
var s_run = "SPACE = Start transition";
var s_fullscreen = "F = Fullscreen on/off";
var s_change = "LEFT/RIGHT = Change transition";
var s_time = "UP/DOWN = Change speed";
var s_speed = string(time) + " STEPS";

// Draw GUI Base Shadow
draw_set_alpha(0.4);
draw_set_color(c_black);
draw_rectangle(0, window_get_height() - 84, window_get_width(), window_get_height() - 80, false);

// Draw GUI Base
draw_set_alpha(1);
draw_set_color(make_colour_rgb(229, 252, 194));
draw_rectangle(0, window_get_height() - 80, window_get_width(), window_get_height(), false);

// Draw all GUI text

draw_set_font(fnt_gui);
draw_set_color(c_black);
draw_set_halign(fa_middle);
draw_set_valign(fa_middle);


draw_text(window_get_width() / 4, window_get_height() - 48, s_change);
draw_text(window_get_width() / 4, window_get_height() - 32, string_upper(s_transition));
draw_text(window_get_width() / 2, window_get_height() - 48, s_run);
draw_text(window_get_width() / 2, window_get_height() - 32, s_fullscreen);
draw_text(window_get_width() / 1.33, window_get_height() - 48, s_time);
draw_text(window_get_width() / 1.33, window_get_height() - 32, s_speed);

draw_set_alpha(a);
draw_set_color(c);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
